// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  googleId        String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  vesselAnalyses  VesselAnalysis[]
}

model VesselAnalysis {
  id                String              @id @default(cuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  parameters        VesselParameter[]
  results           AnalysisResult?
}

// Flexible key-value store for user-defined parameters
model VesselParameter {
  id                String           @id @default(cuid())
  key               String           // e.g., "vesselPrice", "dailyCharterRate"
  value             String           // Stored as string, parsed in backend
  type              String           // e.g., "currency", "percentage", "years"
  analysis          VesselAnalysis   @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId        String
}

// Stores the complex, calculated financial results as JSON
model AnalysisResult {
  id                      String           @id @default(cuid())
  calculatedAt            DateTime         @default(now())
  cashFlowProjections     Json             // JSON object or array for cash flow table
  profitabilityMetrics    Json             // JSON object for metrics like NPV, IRR, Payback Period
  chartData               Json             // JSON formatted for frontend charting libraries
  analysis                VesselAnalysis   @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId              String           @unique
}